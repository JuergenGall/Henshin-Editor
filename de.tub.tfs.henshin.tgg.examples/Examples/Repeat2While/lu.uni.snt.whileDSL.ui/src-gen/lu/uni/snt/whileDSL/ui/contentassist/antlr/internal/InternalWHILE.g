/*
* generated by Xtext
*/
grammar InternalWHILE;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package lu.uni.snt.whileDSL.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package lu.uni.snt.whileDSL.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import lu.uni.snt.whileDSL.services.WHILEGrammarAccess;

}

@parser::members {
 
 	private WHILEGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(WHILEGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleWProgram
entryRuleWProgram 
:
{ before(grammarAccess.getWProgramRule()); }
	 ruleWProgram
{ after(grammarAccess.getWProgramRule()); } 
	 EOF 
;

// Rule WProgram
ruleWProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWProgramAccess().getFstAssignment()); }
(rule__WProgram__FstAssignment)
{ after(grammarAccess.getWProgramAccess().getFstAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFgmnt_LST_Elem
entryRuleFgmnt_LST_Elem 
:
{ before(grammarAccess.getFgmnt_LST_ElemRule()); }
	 ruleFgmnt_LST_Elem
{ after(grammarAccess.getFgmnt_LST_ElemRule()); } 
	 EOF 
;

// Rule Fgmnt_LST_Elem
ruleFgmnt_LST_Elem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getGroup()); }
(rule__Fgmnt_LST_Elem__Group__0)
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVar_Def
entryRuleVar_Def 
:
{ before(grammarAccess.getVar_DefRule()); }
	 ruleVar_Def
{ after(grammarAccess.getVar_DefRule()); } 
	 EOF 
;

// Rule Var_Def
ruleVar_Def
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVar_DefAccess().getGroup()); }
(rule__Var_Def__Group__0)
{ after(grammarAccess.getVar_DefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFn_Call
entryRuleFn_Call 
:
{ before(grammarAccess.getFn_CallRule()); }
	 ruleFn_Call
{ after(grammarAccess.getFn_CallRule()); } 
	 EOF 
;

// Rule Fn_Call
ruleFn_Call
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFn_CallAccess().getGroup()); }
(rule__Fn_Call__Group__0)
{ after(grammarAccess.getFn_CallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFn_Def
entryRuleFn_Def 
:
{ before(grammarAccess.getFn_DefRule()); }
	 ruleFn_Def
{ after(grammarAccess.getFn_DefRule()); } 
	 EOF 
;

// Rule Fn_Def
ruleFn_Def
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFn_DefAccess().getGroup()); }
(rule__Fn_Def__Group__0)
{ after(grammarAccess.getFn_DefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComment
entryRuleComment 
:
{ before(grammarAccess.getCommentRule()); }
	 ruleComment
{ after(grammarAccess.getCommentRule()); } 
	 EOF 
;

// Rule Comment
ruleComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAccess().getGroup()); }
(rule__Comment__Group__0)
{ after(grammarAccess.getCommentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getTypeAssignment()); }
(rule__Expr__TypeAssignment)
{ after(grammarAccess.getExprAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr_T
entryRuleExpr_T 
:
{ before(grammarAccess.getExpr_TRule()); }
	 ruleExpr_T
{ after(grammarAccess.getExpr_TRule()); } 
	 EOF 
;

// Rule Expr_T
ruleExpr_T
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpr_TAccess().getAlternatives()); }
(rule__Expr_T__Alternatives)
{ after(grammarAccess.getExpr_TAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnary
entryRuleUnary 
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryAccess().getAlternatives()); }
(rule__Unary__Alternatives)
{ after(grammarAccess.getUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinary
entryRuleBinary 
:
{ before(grammarAccess.getBinaryRule()); }
	 ruleBinary
{ after(grammarAccess.getBinaryRule()); } 
	 EOF 
;

// Rule Binary
ruleBinary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryAccess().getGroup()); }
(rule__Binary__Group__0)
{ after(grammarAccess.getBinaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNeg
entryRuleNeg 
:
{ before(grammarAccess.getNegRule()); }
	 ruleNeg
{ after(grammarAccess.getNegRule()); } 
	 EOF 
;

// Rule Neg
ruleNeg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegAccess().getGroup()); }
(rule__Neg__Group__0)
{ after(grammarAccess.getNegAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVar
entryRuleVar 
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarAccess().getLabelAssignment()); }
(rule__Var__LabelAssignment)
{ after(grammarAccess.getVarAccess().getLabelAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fgmnt_LST_Elem__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getWhileParserRuleCall_0_0()); }
	ruleWhile
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getWhileParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getVar_DefParserRuleCall_0_1()); }
	ruleVar_Def
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getVar_DefParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getFn_CallParserRuleCall_0_2()); }
	ruleFn_Call
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getFn_CallParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getFn_DefParserRuleCall_0_3()); }
	ruleFn_Def
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getFn_DefParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getCommentParserRuleCall_0_4()); }
	ruleComment
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getCommentParserRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr_T__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpr_TAccess().getUnaryParserRuleCall_0()); }
	ruleUnary
{ after(grammarAccess.getExpr_TAccess().getUnaryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpr_TAccess().getBinaryParserRuleCall_1()); }
	ruleBinary
{ after(grammarAccess.getExpr_TAccess().getBinaryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getNegParserRuleCall_0()); }
	ruleNeg
{ after(grammarAccess.getUnaryAccess().getNegParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getVarParserRuleCall_1()); }
	ruleVar
{ after(grammarAccess.getUnaryAccess().getVarParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getInputParserRuleCall_2()); }
	ruleInput
{ after(grammarAccess.getUnaryAccess().getInputParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__OperatorAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getOperatorAmpersandAmpersandKeyword_2_0_0()); }

	'&&' 

{ after(grammarAccess.getBinaryAccess().getOperatorAmpersandAmpersandKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getBinaryAccess().getOperatorVerticalLineVerticalLineKeyword_2_0_1()); }

	'||' 

{ after(grammarAccess.getBinaryAccess().getOperatorVerticalLineVerticalLineKeyword_2_0_1()); }
)

    |(
{ before(grammarAccess.getBinaryAccess().getOperatorEqualsSignEqualsSignKeyword_2_0_2()); }

	'==' 

{ after(grammarAccess.getBinaryAccess().getOperatorEqualsSignEqualsSignKeyword_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Fgmnt_LST_Elem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fgmnt_LST_Elem__Group__0__Impl
	rule__Fgmnt_LST_Elem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fgmnt_LST_Elem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getAlternatives_0()); }
(rule__Fgmnt_LST_Elem__Alternatives_0)
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fgmnt_LST_Elem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fgmnt_LST_Elem__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fgmnt_LST_Elem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getNextAssignment_1()); }
(rule__Fgmnt_LST_Elem__NextAssignment_1)?
{ after(grammarAccess.getFgmnt_LST_ElemAccess().getNextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExprAssignment_2()); }
(rule__While__ExprAssignment_2)
{ after(grammarAccess.getWhileAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getFgmntAssignment_5()); }
(rule__While__FgmntAssignment_5)
{ after(grammarAccess.getWhileAccess().getFgmntAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Var_Def__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Var_Def__Group__0__Impl
	rule__Var_Def__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_Def__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVar_DefAccess().getLeftAssignment_0()); }
(rule__Var_Def__LeftAssignment_0)
{ after(grammarAccess.getVar_DefAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Var_Def__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Var_Def__Group__1__Impl
	rule__Var_Def__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_Def__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVar_DefAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getVar_DefAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Var_Def__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Var_Def__Group__2__Impl
	rule__Var_Def__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_Def__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVar_DefAccess().getRightAssignment_2()); }
(rule__Var_Def__RightAssignment_2)
{ after(grammarAccess.getVar_DefAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Var_Def__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Var_Def__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var_Def__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVar_DefAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getVar_DefAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Fn_Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Call__Group__0__Impl
	rule__Fn_Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_CallAccess().getNameFAssignment_0()); }
(rule__Fn_Call__NameFAssignment_0)
{ after(grammarAccess.getFn_CallAccess().getNameFAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Call__Group__1__Impl
	rule__Fn_Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_CallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFn_CallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Call__Group__2__Impl
	rule__Fn_Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_CallAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getFn_CallAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Call__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_CallAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getFn_CallAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Fn_Def__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__0__Impl
	rule__Fn_Def__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getDefKeyword_0()); }

	'def' 

{ after(grammarAccess.getFn_DefAccess().getDefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__1__Impl
	rule__Fn_Def__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getNameFAssignment_1()); }
(rule__Fn_Def__NameFAssignment_1)
{ after(grammarAccess.getFn_DefAccess().getNameFAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__2__Impl
	rule__Fn_Def__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFn_DefAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__3__Impl
	rule__Fn_Def__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFn_DefAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__4__Impl
	rule__Fn_Def__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getFn_DefAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__5__Impl
	rule__Fn_Def__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getBodyAssignment_5()); }
(rule__Fn_Def__BodyAssignment_5)
{ after(grammarAccess.getFn_DefAccess().getBodyAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__6__Impl
	rule__Fn_Def__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getFn_DefAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fn_Def__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fn_Def__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getFn_DefAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Comment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__0__Impl
	rule__Comment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getSolidusNumberSignKeyword_0()); }

	'/#' 

{ after(grammarAccess.getCommentAccess().getSolidusNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__1__Impl
	rule__Comment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getCommentAssignment_1()); }
(rule__Comment__CommentAssignment_1)
{ after(grammarAccess.getCommentAccess().getCommentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getNumberSignSolidusKeyword_2()); }

	'#/' 

{ after(grammarAccess.getCommentAccess().getNumberSignSolidusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Binary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__0__Impl
	rule__Binary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getBinaryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__1__Impl
	rule__Binary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getFstAssignment_1()); }
(rule__Binary__FstAssignment_1)
{ after(grammarAccess.getBinaryAccess().getFstAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__2__Impl
	rule__Binary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getOperatorAssignment_2()); }
(rule__Binary__OperatorAssignment_2)
{ after(grammarAccess.getBinaryAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__3__Impl
	rule__Binary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getSndAssignment_3()); }
(rule__Binary__SndAssignment_3)
{ after(grammarAccess.getBinaryAccess().getSndAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binary__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getBinaryAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Neg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group__0__Impl
	rule__Neg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNegAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Neg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExprAssignment_1()); }
(rule__Neg__ExprAssignment_1)
{ after(grammarAccess.getNegAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputAction_0()); }
(

)
{ after(grammarAccess.getInputAccess().getInputAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getInputKeyword_1()); }

	'input' 

{ after(grammarAccess.getInputAccess().getInputKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getInputAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getInputAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__WProgram__FstAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWProgramAccess().getFstFgmnt_LST_ElemParserRuleCall_0()); }
	ruleFgmnt_LST_Elem{ after(grammarAccess.getWProgramAccess().getFstFgmnt_LST_ElemParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fgmnt_LST_Elem__NextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFgmnt_LST_ElemAccess().getNextFgmnt_LST_ElemParserRuleCall_1_0()); }
	ruleFgmnt_LST_Elem{ after(grammarAccess.getFgmnt_LST_ElemAccess().getNextFgmnt_LST_ElemParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExprExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getWhileAccess().getExprExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__FgmntAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getFgmntFgmnt_LST_ElemParserRuleCall_5_0()); }
	ruleFgmnt_LST_Elem{ after(grammarAccess.getWhileAccess().getFgmntFgmnt_LST_ElemParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Var_Def__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVar_DefAccess().getLeftVarParserRuleCall_0_0()); }
	ruleVar{ after(grammarAccess.getVar_DefAccess().getLeftVarParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Var_Def__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVar_DefAccess().getRightExprParserRuleCall_2_0()); }
	ruleExpr{ after(grammarAccess.getVar_DefAccess().getRightExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Call__NameFAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_CallAccess().getNameFIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFn_CallAccess().getNameFIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__NameFAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getNameFIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFn_DefAccess().getNameFIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fn_Def__BodyAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFn_DefAccess().getBodyFgmnt_LST_ElemParserRuleCall_5_0()); }
	ruleFgmnt_LST_Elem{ after(grammarAccess.getFn_DefAccess().getBodyFgmnt_LST_ElemParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comment__CommentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAccess().getCommentSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getCommentAccess().getCommentSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getTypeExpr_TParserRuleCall_0()); }
	ruleExpr_T{ after(grammarAccess.getExprAccess().getTypeExpr_TParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__FstAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getFstExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getBinaryAccess().getFstExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getOperatorAlternatives_2_0()); }
(rule__Binary__OperatorAlternatives_2_0)
{ after(grammarAccess.getBinaryAccess().getOperatorAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__SndAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryAccess().getSndExprParserRuleCall_3_0()); }
	ruleExpr{ after(grammarAccess.getBinaryAccess().getSndExprParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExprExprParserRuleCall_1_0()); }
	ruleExpr{ after(grammarAccess.getNegAccess().getExprExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Var__LabelAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccess().getLabelIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVarAccess().getLabelIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


